"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const child_process_1 = require("child_process");
function detectPackageManager(host) {
    return __awaiter(this, void 0, void 0, function* () {
        const hostTree = new schematics_1.HostTree(host);
        if (hostTree.get('workspace.json')) {
            const workspaceJson = JSON.parse(hostTree.read('workspace.json').toString());
            if (workspaceJson.cli && workspaceJson.cli.packageManager) {
                return workspaceJson.cli.packageManager;
            }
        }
        if (yield fileExists(host, 'yarn.lock')) {
            return 'yarn';
        }
        if (yield fileExists(host, 'pnpm-lock.yaml')) {
            return 'pnpm';
        }
        if (yield fileExists(host, 'package-lock.json')) {
            return 'npm';
        }
        // If we get here, there are no lock files,
        // so lets check for package managers in our preferred order
        if (isPackageManagerInstalled('yarn')) {
            return 'yarn';
        }
        if (isPackageManagerInstalled('pnpm')) {
            return 'pnpm';
        }
        return 'npm';
    });
}
exports.detectPackageManager = detectPackageManager;
function fileExists(host, fileName) {
    return host.exists(fileName).toPromise();
}
function isPackageManagerInstalled(packageManager) {
    try {
        child_process_1.execSync(`${packageManager} --version`, {
            stdio: ['ignore', 'ignore', 'ignore'],
        });
        return true;
    }
    catch (e) {
        return false;
    }
}
