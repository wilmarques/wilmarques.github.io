"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const workspace_2 = require("@nrwl/workspace/src/utils/workspace");
describe('Update 8.10.0', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        tree = testing_1.createEmptyWorkspace(tree);
    }));
    it('should fix projects with invalid tslint configs', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_2.callRule(schematics_1.chain([
            workspace_2.updateWorkspace((workspace) => {
                workspace.projects.add({
                    name: 'proj-with-invalid-tslint',
                    root: 'proj-with-invalid-tslint',
                });
            }),
            workspace_1.updateJsonInTree('proj-with-invalid-tslint/tslint.json', () => ({
                rules: [],
            })),
        ]), tree);
        const result = yield testing_2.runMigration('fix-tslint-json', {}, tree);
        expect(workspace_1.readJsonInTree(result, 'proj-with-invalid-tslint/tslint.json').rules).toEqual({});
    }));
    it('should fix projects with valid tslint configs', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_2.callRule(schematics_1.chain([
            workspace_2.updateWorkspace((workspace) => {
                workspace.projects.add({
                    name: 'proj-with-valid-tslint',
                    root: 'proj-with-valid-tslint',
                });
            }),
            workspace_1.updateJsonInTree('proj-with-valid-tslint/tslint.json', () => ({
                rules: {
                    rule: [true],
                },
            })),
        ]), tree);
        const result = yield testing_2.runMigration('fix-tslint-json', {}, tree);
        expect(workspace_1.readJsonInTree(result, 'proj-with-valid-tslint/tslint.json').rules).toEqual({
            rule: [true],
        });
    }));
    it('should not add tslint configs to projects without tslint configs', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_2.callRule(schematics_1.chain([
            workspace_2.updateWorkspace((workspace) => {
                workspace.projects.add({
                    name: 'proj-without-tslint',
                    root: 'proj-without-tslint',
                });
            }),
        ]), tree);
        const result = yield testing_2.runMigration('fix-tslint-json', {}, tree);
        expect(result.exists('proj-without-tslint/tslint.json')).toEqual(false);
    }));
});
