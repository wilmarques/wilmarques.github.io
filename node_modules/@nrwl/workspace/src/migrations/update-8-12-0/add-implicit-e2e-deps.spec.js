"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_utils_1 = require("../../utils/testing-utils");
const testing_1 = require("../../utils/testing");
const ast_utils_1 = require("../../utils/ast-utils");
describe('Update 8.12.0', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        tree = testing_utils_1.createEmptyWorkspace(tree);
        tree = yield testing_1.callRule(ast_utils_1.updateJsonInTree('nx.json', (json) => {
            json.projects['my-app'] = {
                tags: [],
            };
            json.projects['my-app-e2e'] = {
                tags: [],
            };
            json.projects['my-non-existent-app-e2e'] = {
                tags: [],
            };
            return json;
        }), tree);
    }));
    it('should add implicit dependencies for e2e projects', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield testing_1.runMigration('add-implicit-e2e-deps', {}, tree);
        const nxJson = ast_utils_1.readJsonInTree(result, 'nx.json');
        expect(nxJson.projects['my-app-e2e']).toEqual({
            tags: [],
            implicitDependencies: ['my-app'],
        });
        expect(nxJson.projects['my-non-existent-app-e2e']).toEqual({
            tags: [],
        });
    }));
    it('should not add duplicate implicit dependencies for e2e projects', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_1.callRule(ast_utils_1.updateJsonInTree('nx.json', (json) => {
            json.projects['my-app-e2e'].implicitDependencies = ['my-app'];
            return json;
        }), tree);
        const result = yield testing_1.runMigration('add-implicit-e2e-deps', {}, tree);
        const nxJson = ast_utils_1.readJsonInTree(result, 'nx.json');
        expect(nxJson.projects['my-app-e2e']).toEqual({
            tags: [],
            implicitDependencies: ['my-app'],
        });
        expect(nxJson.projects['my-non-existent-app-e2e']).toEqual({
            tags: [],
        });
    }));
});
