"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("../../utils/ast-utils");
const testing_1 = require("../../utils/testing");
const core_1 = require("@angular-devkit/core/src/workspace/core");
describe('Add update-enforce-boundary-lint rule', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        // Not invoking the createEmptyWorkspace(..) here as I want to
        // customize the linter being used
        core_1._test_addWorkspaceFile('workspace.json', core_1.WorkspaceFormat.JSON);
        tree.create('/workspace.json', JSON.stringify({ version: 1, projects: {}, newProjectRoot: '' }));
        tree.create('/package.json', JSON.stringify({
            name: 'test-name',
            dependencies: {},
            devDependencies: {},
        }));
        tree.create('/nx.json', JSON.stringify({ npmScope: 'proj', projects: {} }));
        tree.create('/tsconfig.json', JSON.stringify({ compilerOptions: { paths: {} } }));
    }));
    describe('when using tslint', () => {
        beforeEach(() => {
            tree.create('/tslint.json', JSON.stringify({
                rules: {
                    'nx-enforce-module-boundaries': [
                        true,
                        {
                            npmScope: '<%= npmScope %>',
                            lazyLoad: [],
                            allow: [],
                        },
                    ],
                },
            }));
        });
        it('should add the proper enforceBuildableLibDependency flag', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield testing_1.runMigration('update-enforce-boundary-lint-rule', {}, tree);
            const lintContent = ast_utils_1.readJsonInTree(result, 'tslint.json');
            expect(lintContent.rules['nx-enforce-module-boundaries'][1]
                .enforceBuildableLibDependency).toBeTruthy();
        }));
    });
    describe('when using eslint', () => {
        beforeEach(() => {
            tree.create('/.eslintrc', JSON.stringify({
                rules: {
                    '@nrwl/nx/enforce-module-boundaries': [
                        true,
                        {
                            npmScope: '<%= npmScope %>',
                            lazyLoad: [],
                            allow: [],
                        },
                    ],
                },
            }));
        });
        it('should add the proper enforceBuildableLibDependency flag', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield testing_1.runMigration('update-enforce-boundary-lint-rule', {}, tree);
            const lintContent = ast_utils_1.readJsonInTree(result, '.eslintrc');
            expect(lintContent.rules['@nrwl/nx/enforce-module-boundaries'][1]
                .enforceBuildableLibDependency).toBeTruthy();
        }));
    });
});
