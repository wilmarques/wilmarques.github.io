"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
describe('Update 9.2.0', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        tree = testing_1.createEmptyWorkspace(tree);
    }));
    describe('for projects with no tasks runner options', () => {
        it('should add configuration for cacheable operations', () => __awaiter(void 0, void 0, void 0, function* () {
            tree = yield testing_2.runMigration('update-9-2-0', {}, tree);
            const nxJson = workspace_1.readJsonInTree(tree, 'nx.json');
            expect(nxJson.tasksRunnerOptions).toEqual({
                default: {
                    runner: '@nrwl/workspace/tasks-runners/default',
                    options: {
                        cacheableOperations: ['build', 'lint', 'test', 'e2e'],
                    },
                },
            });
        }));
    });
    describe('for projects with tasks runner options', () => {
        describe('with @nrwl/workspace/src/tasks-runner/default-task-runner', () => {
            it('should add configuration for cacheable operations', () => __awaiter(void 0, void 0, void 0, function* () {
                tree = yield testing_2.callRule(workspace_1.updateJsonInTree('nx.json', (json) => {
                    json.tasksRunnerOptions = {
                        default: {
                            runner: '@nrwl/workspace/src/tasks-runner/default-task-runner',
                            options: {
                                cacheableOperations: ['custom-operation'],
                            },
                        },
                    };
                    return json;
                }), tree);
                tree = yield testing_2.runMigration('update-9-2-0', {}, tree);
                const nxJson = workspace_1.readJsonInTree(tree, 'nx.json');
                expect(nxJson.tasksRunnerOptions).toEqual({
                    default: {
                        runner: '@nrwl/workspace/tasks-runners/default',
                        options: {
                            cacheableOperations: [
                                'custom-operation',
                                'build',
                                'lint',
                                'test',
                                'e2e',
                            ],
                        },
                    },
                });
            }));
        });
        describe('with @nrwl/workspace/src/tasks-runner/tasks-runner-v2', () => {
            it('should add configuration for cacheable operations', () => __awaiter(void 0, void 0, void 0, function* () {
                tree = yield testing_2.callRule(workspace_1.updateJsonInTree('nx.json', (json) => {
                    json.tasksRunnerOptions = {
                        default: {
                            runner: '@nrwl/workspace/src/tasks-runner/tasks-runner-v2',
                            options: {
                                cacheableOperations: ['custom-operation'],
                            },
                        },
                    };
                    return json;
                }), tree);
                tree = yield testing_2.runMigration('update-9-2-0', {}, tree);
                const nxJson = workspace_1.readJsonInTree(tree, 'nx.json');
                expect(nxJson.tasksRunnerOptions).toEqual({
                    default: {
                        runner: '@nrwl/workspace/tasks-runners/default',
                        options: {
                            cacheableOperations: [
                                'custom-operation',
                                'build',
                                'lint',
                                'test',
                                'e2e',
                            ],
                        },
                    },
                });
            }));
        });
    });
});
