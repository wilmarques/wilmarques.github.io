"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const strip_source_code_1 = require("./strip-source-code");
const typescript_1 = require("typescript");
describe('stripSourceCode', () => {
    let scanner;
    beforeEach(() => {
        scanner = typescript_1.createScanner(typescript_1.ScriptTarget.Latest, false);
    });
    it('should work on different types of imports', () => {
        const input = `
      import * as React from "react";
      import { Component } from "react";
      import {
        Component
      } from "react"
      import {
        Component
      } from "react";
      
      import "./app.scss";

      import('./module.ts')

      const a = 1;
      export class App {}
    `;
        const expected = `import * as React from "react"
import { Component } from "react"
import {
        Component
      } from "react"
import {
        Component
      } from "react"
import "./app.scss"
import('./module.ts')`;
        expect(strip_source_code_1.stripSourceCode(scanner, input)).toEqual(expected);
    });
    it('should work on different types of exports', () => {
        const input = `export * from './module';
      export {
        A
      } from './a';

      export { B } from './b';

      export { C as D } from './c';

      const a = 1;
      export class App {}
    `;
        const expected = `export * from './module'
export {
        A
      } from './a'
export { B } from './b'
export { C as D } from './c'`;
        expect(strip_source_code_1.stripSourceCode(scanner, input)).toEqual(expected);
    });
    it('should not strip files containing "loadChildren"', () => {
        const input = `const routes = [
      {
        path: 'lazy',
        loadChildren: '@nrwl/lazy'
      }
    ];`;
        expect(strip_source_code_1.stripSourceCode(scanner, input)).toEqual(input);
    });
});
