"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const ast_utils_1 = require("../ast-utils");
const testing_2 = require("../testing");
const workspace_1 = require("./workspace");
const core_1 = require("@angular-devkit/core/src/workspace/core");
describe('Workspace', () => {
    const defaultCollectionName = '@nrwl/node';
    const workspaceJsonFileName = 'workspace.json';
    const nrwlWorkspaceName = '@nrwl/workspace';
    let tree;
    beforeEach(() => {
        core_1._test_addWorkspaceFile('workspace.json', core_1.WorkspaceFormat.JSON);
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree.create('/workspace.json', JSON.stringify({ version: 1, projects: {}, newProjectRoot: '' }));
    });
    describe('setDefaultCollection', () => {
        it('should be set if none was set before', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = new testing_1.UnitTestTree(yield testing_2.callRule(workspace_1.setDefaultCollection(defaultCollectionName), tree));
            const workspaceJson = ast_utils_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.cli.defaultCollection).toEqual(defaultCollectionName);
        }));
        it(`should be set if ${nrwlWorkspaceName} was set before`, () => __awaiter(void 0, void 0, void 0, function* () {
            tree = new testing_1.UnitTestTree(yield testing_2.callRule(ast_utils_1.updateJsonInTree(workspaceJsonFileName, (json) => {
                json.cli = {
                    defaultCollection: nrwlWorkspaceName,
                };
                return json;
            }), tree));
            const result = new testing_1.UnitTestTree(yield testing_2.callRule(workspace_1.setDefaultCollection(defaultCollectionName), tree));
            const workspaceJson = ast_utils_1.readJsonInTree(result, workspaceJsonFileName);
            expect(workspaceJson.cli.defaultCollection).toEqual(defaultCollectionName);
        }));
        it('should not be set if something else was set before', () => __awaiter(void 0, void 0, void 0, function* () {
            const otherCollection = '@nrwl/angular';
            tree = new testing_1.UnitTestTree(yield testing_2.callRule(ast_utils_1.updateJsonInTree(workspaceJsonFileName, (json) => {
                json.cli = {
                    defaultCollection: otherCollection,
                };
                json.schematics = {};
                return json;
            }), tree));
            const result = new testing_1.UnitTestTree(yield testing_2.callRule(workspace_1.setDefaultCollection(defaultCollectionName), tree));
            const workspaceJson = ast_utils_1.readJsonInTree(result, workspaceJsonFileName);
            expect(workspaceJson.cli.defaultCollection).toEqual(otherCollection);
        }));
    });
});
