"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const axios_1 = require("axios");
const output_1 = require("../output");
const COMMUNITY_PLUGINS_JSON_URL = 'https://raw.githubusercontent.com/nrwl/nx/master/community/approved-plugins.json';
function fetchCommunityPlugins() {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(COMMUNITY_PLUGINS_JSON_URL);
        return response.data;
    });
}
exports.fetchCommunityPlugins = fetchCommunityPlugins;
function listCommunityPlugins(installedPlugins, communityPlugins) {
    try {
        const installedPluginsMap = new Set(installedPlugins.map((p) => p.name));
        const availableCommunityPlugins = communityPlugins.filter((p) => !installedPluginsMap.has(p.name));
        output_1.output.log({
            title: `Community plugins:`,
            bodyLines: availableCommunityPlugins.map((p) => {
                return `${core_1.terminal.bold(p.name)} - ${p.description}`;
            }),
        });
    }
    catch (error) {
        output_1.output.warn({
            title: `Community plugins:`,
            bodyLines: [`Error fetching plugins.`, error],
        });
    }
}
exports.listCommunityPlugins = listCommunityPlugins;
