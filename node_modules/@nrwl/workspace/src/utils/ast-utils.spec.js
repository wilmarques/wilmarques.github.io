"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ast_utils_1 = require("./ast-utils");
const testing_1 = require("@angular-devkit/schematics/testing");
const schematics_1 = require("@angular-devkit/schematics");
const fileutils_1 = require("./fileutils");
const testing_utils_1 = require("./testing-utils");
describe('readJsonInTree', () => {
    let tree;
    beforeEach(() => {
        tree = schematics_1.Tree.empty();
    });
    it('should read JSON from the tree', () => {
        tree.create('data.json', fileutils_1.serializeJson({
            data: 'data',
        }));
        expect(ast_utils_1.readJsonInTree(tree, 'data.json')).toEqual({
            data: 'data',
        });
    });
    it('should handle json files with comments', () => {
        tree.create('data.json', `{
      // data: 'data'
      }`);
        expect(ast_utils_1.readJsonInTree(tree, 'data.json')).toEqual({});
    });
    it('should throw an error if the file does not exist', () => {
        expect(() => ast_utils_1.readJsonInTree(tree, 'data.json')).toThrow('Cannot find data.json');
    });
    it('should throw an error if the file cannot be parsed', () => {
        tree.create('data.json', `{ data: 'data'`);
        expect(() => ast_utils_1.readJsonInTree(tree, 'data.json')).toThrow('Cannot parse data.json: Unexpected token d in JSON at position 2');
    });
});
describe('renameSyncInTree', () => {
    let tree;
    beforeEach(() => {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
    });
    it('should rename a file in the tree', () => {
        const content = 'my content';
        tree.create('/a', content);
        ast_utils_1.renameSyncInTree(tree, '/a', '/b', (err) => {
            expect(err).toBeFalsy();
            expect(content).toEqual(tree.readContent('/b'));
        });
    });
    it('should rename a file in the tree to a nested dir', () => {
        const content = 'my content';
        tree.create('/a', content);
        ast_utils_1.renameSyncInTree(tree, '/a', '/x/y/z/b', (err) => {
            expect(err).toBeFalsy();
            expect(content).toEqual(tree.readContent('/x/y/z/b'));
        });
    });
});
describe('renameDirSyncInTree', () => {
    let tree;
    beforeEach(() => {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
    });
    it('should rename a dir in the tree', () => {
        const content = 'my content';
        tree.create('/dir/a', content);
        tree.create('/dir/b', content);
        ast_utils_1.renameDirSyncInTree(tree, 'dir', '/newdir', (err) => {
            expect(err).toBeFalsy();
            expect(tree.files).toContain('/newdir/a');
            expect(tree.files).toContain('/newdir/b');
            expect(tree.files).not.toContain('/dir/a');
            expect(tree.files).not.toContain('/dir/b');
        });
    });
    it('should rename a dir in the tree, with sub dirs', () => {
        const content = 'my content';
        tree.create('/dir/a', content);
        tree.create('/dir/b', content);
        tree.create('/dir/sub1/c', content);
        tree.create('/dir/sub1/d', content);
        tree.create('/dir/sub1/sub2/e', content);
        tree.create('/dir/sub1/sub2/f', content);
        ast_utils_1.renameDirSyncInTree(tree, 'dir', '/newdir', (err) => {
            expect(err).toBeFalsy();
            expect(tree.files).toContain('/newdir/a');
            expect(tree.files).toContain('/newdir/b');
            expect(tree.files).not.toContain('/dir/a');
            expect(tree.files).not.toContain('/dir/b');
            expect(tree.files).toContain('/newdir/sub1/c');
            expect(tree.files).toContain('/newdir/sub1/d');
            expect(tree.files).not.toContain('/dir/sub1/c');
            expect(tree.files).not.toContain('/dir/sub1/d');
            expect(tree.files).toContain('/newdir/sub1/sub2/e');
            expect(tree.files).toContain('/newdir/sub1/sub2/f');
            expect(tree.files).not.toContain('/dir/sub1/sub2/e');
            expect(tree.files).not.toContain('/dir/sub1/sub2/f');
        });
    });
});
describe('addDepsToPackageJson', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_utils_1.createEmptyWorkspace(appTree);
    });
    it('should not update the package.json if dependencies have already been added', () => __awaiter(void 0, void 0, void 0, function* () {
        const devDeps = {
            '@nrwl/jest': '1.2.3',
        };
        appTree.overwrite('/package.json', JSON.stringify({
            dependencies: {},
            devDependencies: Object.assign({}, devDeps),
        }));
        const testRunner = new testing_1.SchematicTestRunner('@nrwl/jest', null);
        yield testRunner
            .callRule(() => {
            return ast_utils_1.addDepsToPackageJson({}, devDeps);
        }, appTree)
            .toPromise();
        expect(testRunner.tasks.find((x) => x.name === 'node-package')).not.toBeDefined();
    }));
    it('should update the package.json if some of the dependencies are missing', () => __awaiter(void 0, void 0, void 0, function* () {
        const devDeps = {
            '@nrwl/jest': '1.2.3',
            '@nrwl/workspace': '1.1.1',
        };
        appTree.overwrite('/package.json', JSON.stringify({
            dependencies: {},
            devDependencies: {
                '@nrwl/jest': '1.2.3',
            },
        }));
        const testRunner = new testing_1.SchematicTestRunner('@nrwl/jest', null);
        yield testRunner
            .callRule(() => {
            return ast_utils_1.addDepsToPackageJson({}, devDeps);
        }, appTree)
            .toPromise();
        expect(testRunner.tasks.find((x) => x.name === 'node-package')).toBeDefined();
    }));
});
