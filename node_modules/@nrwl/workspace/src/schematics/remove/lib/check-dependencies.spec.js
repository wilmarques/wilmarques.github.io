"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const workspace_1 = require("@nrwl/workspace");
const testing_2 = require("@nrwl/workspace/testing");
const testing_3 = require("../../../utils/testing");
const check_dependencies_1 = require("./check-dependencies");
describe('updateImports Rule', () => {
    let tree;
    let schema;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree = testing_2.createEmptyWorkspace(tree);
        schema = {
            projectName: 'my-source',
            skipFormat: false,
            forceRemove: false,
        };
        tree = yield testing_3.runSchematic('lib', { name: 'my-dependent' }, tree);
        tree = yield testing_3.runSchematic('lib', { name: 'my-source' }, tree);
    }));
    describe('static dependencies', () => {
        beforeEach(() => {
            const sourceFilePath = 'libs/my-source/src/lib/my-source.ts';
            tree.overwrite(sourceFilePath, `export class MyClass {}
        `);
            const dependentFilePath = 'libs/my-dependent/src/lib/my-dependent.ts';
            tree.overwrite(dependentFilePath, `import { MyClass } from '@proj/my-source';
  
        export MyExtendedClass extends MyClass {};
      `);
        });
        it('should fatally error if any dependent exists', () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(testing_3.callRule(check_dependencies_1.checkDependencies(schema), tree)).rejects.toThrow(`${schema.projectName} is still depended on by the following projects:\nmy-dependent`);
        }));
        it('should not error if forceRemove is true', () => __awaiter(void 0, void 0, void 0, function* () {
            schema.forceRemove = true;
            yield expect(testing_3.callRule(check_dependencies_1.checkDependencies(schema), tree)).resolves.not.toThrow();
        }));
    });
    describe('implicit dependencies', () => {
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            tree = (yield testing_3.callRule(workspace_1.updateJsonInTree('nx.json', (json) => {
                json.projects['my-dependent'].implicitDependencies = ['my-source'];
                return json;
            }), tree));
        }));
        it('should fatally error if any dependent exists', () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(testing_3.callRule(check_dependencies_1.checkDependencies(schema), tree)).rejects.toThrow(`${schema.projectName} is still depended on by the following projects:\nmy-dependent`);
        }));
        it('should not error if forceRemove is true', () => __awaiter(void 0, void 0, void 0, function* () {
            schema.forceRemove = true;
            yield expect(testing_3.callRule(check_dependencies_1.checkDependencies(schema), tree)).resolves.not.toThrow();
        }));
    });
    it('should not error if there are no dependents', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(testing_3.callRule(check_dependencies_1.checkDependencies(schema), tree)).resolves.not.toThrow();
    }));
});
