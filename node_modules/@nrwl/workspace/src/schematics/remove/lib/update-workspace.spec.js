"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const workspace_1 = require("@nrwl/workspace");
const testing_2 = require("@nrwl/workspace/testing");
const testing_3 = require("../../../utils/testing");
const update_workspace_1 = require("./update-workspace");
describe('updateWorkspace Rule', () => {
    let tree;
    let schema;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree = testing_2.createEmptyWorkspace(tree);
        schema = {
            projectName: 'ng-app',
            skipFormat: false,
            forceRemove: false,
        };
        tree = (yield testing_3.callRule(workspace_1.updateWorkspaceInTree((workspace) => {
            return {
                version: 1,
                projects: {
                    'ng-app': {
                        projectType: 'application',
                        schematics: {},
                        root: 'apps/ng-app',
                        sourceRoot: 'apps/ng-app/src',
                        prefix: 'happyorg',
                        architect: {
                            build: {
                                builder: '@angular-devkit/build-angular:browser',
                                options: {},
                            },
                        },
                    },
                    'ng-app-e2e': {
                        root: 'apps/ng-app-e2e',
                        sourceRoot: 'apps/ng-app-e2e/src',
                        projectType: 'application',
                        architect: {
                            e2e: {
                                builder: '@nrwl/cypress:cypress',
                                options: {
                                    cypressConfig: 'apps/ng-app-e2e/cypress.json',
                                    tsConfig: 'apps/ng-app-e2e/tsconfig.e2e.json',
                                    devServerTarget: 'ng-app:serve',
                                },
                            },
                        },
                    },
                },
            };
        }), tree));
    }));
    it('should delete the project', () => __awaiter(void 0, void 0, void 0, function* () {
        let workspace = JSON.parse(tree.read('workspace.json').toString());
        expect(workspace.projects['ng-app']).toBeDefined();
        tree = (yield testing_3.callRule(update_workspace_1.updateWorkspace(schema), tree));
        workspace = JSON.parse(tree.read('workspace.json').toString());
        expect(workspace.projects['ng-app']).toBeUndefined();
    }));
});
