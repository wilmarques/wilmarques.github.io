"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const testing_2 = require("@nrwl/workspace/testing");
const testing_3 = require("../../../utils/testing");
const update_jest_config_1 = require("./update-jest-config");
describe('updateJestConfig Rule', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree = testing_2.createEmptyWorkspace(tree);
    }));
    it('should handle jest config not existing', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_3.runSchematic('lib', { name: 'my-source' }, tree);
        const schema = {
            projectName: 'my-source',
            destination: 'my-destination',
        };
        yield expect(testing_3.callRule(update_jest_config_1.updateJestConfig(schema), tree)).resolves.not.toThrow();
    }));
    it('should update the name and coverage directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const jestConfig = `module.exports = {
      name: 'my-source',
      preset: '../../jest.config.js',
      coverageDirectory: '../../coverage/libs/my-source',
      snapshotSerializers: [
        'jest-preset-angular/AngularSnapshotSerializer.js',
        'jest-preset-angular/HTMLCommentSerializer.js'
      ]
    };`;
        const jestConfigPath = '/libs/my-destination/jest.config.js';
        tree = yield testing_3.runSchematic('lib', { name: 'my-source' }, tree);
        tree.create(jestConfigPath, jestConfig);
        const schema = {
            projectName: 'my-source',
            destination: 'my-destination',
        };
        tree = (yield testing_3.callRule(update_jest_config_1.updateJestConfig(schema), tree));
        const jestConfigAfter = tree.read(jestConfigPath).toString();
        expect(jestConfigAfter).toContain(`name: 'my-destination'`);
        expect(jestConfigAfter).toContain(`coverageDirectory: '../../coverage/libs/my-destination'`);
    }));
});
