"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../../utils/testing");
describe('moveProject Rule', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = testing_1.createEmptyWorkspace(schematics_1.Tree.empty());
        tree = yield testing_2.runSchematic('lib', { name: 'my-lib' }, tree);
    }));
    it('should copy all files and delete the source folder', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = {
            projectName: 'my-lib',
            destination: 'my-destination',
        };
        // TODO - Currently this test will fail due to
        //        https://github.com/angular/angular-cli/issues/16527
        // host = await callRule(moveProject(schema), host);
        // const destinationDir = host.getDir('libs/my-destination');
        // let filesFound = false;
        // destinationDir.visit(_file => {
        //   filesFound = true;
        // });
        // expect(filesFound).toBeTruthy();
        // const sourceDir = host.getDir('libs/my-lib');
        // filesFound = false;
        // sourceDir.visit(_file => {
        //   filesFound = true;
        // });
        // expect(filesFound).toBeFalsy();
    }));
});
