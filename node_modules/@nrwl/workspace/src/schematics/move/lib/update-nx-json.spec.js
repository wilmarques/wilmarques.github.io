"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const workspace_1 = require("@nrwl/workspace");
const testing_2 = require("@nrwl/workspace/testing");
const testing_3 = require("../../../utils/testing");
const update_nx_json_1 = require("./update-nx-json");
describe('updateNxJson Rule', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree = testing_2.createEmptyWorkspace(tree);
    }));
    it('should update nx.json', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_3.runSchematic('lib', { name: 'my-source' }, tree);
        const schema = {
            projectName: 'my-source',
            destination: 'my-destination',
        };
        tree = (yield testing_3.callRule(update_nx_json_1.updateNxJson(schema), tree));
        const nxJson = workspace_1.readJsonInTree(tree, '/nx.json');
        expect(nxJson.projects['my-source']).toBeUndefined();
        expect(nxJson.projects['my-destination']).toEqual({
            tags: [],
        });
    }));
});
