"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../../utils/testing");
const check_destination_1 = require("./check-destination");
describe('checkDestination Rule', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = testing_1.createEmptyWorkspace(schematics_1.Tree.empty());
        tree = yield testing_2.runSchematic('lib', { name: 'my-lib' }, tree);
    }));
    it('should throw an error if the path is not explicit', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = {
            projectName: 'my-lib',
            destination: '../apps/not-an-app',
        };
        yield expect(testing_2.callRule(check_destination_1.checkDestination(schema), tree)).rejects.toThrow(`Invalid destination: [${schema.destination}] - Please specify explicit path.`);
    }));
    it('should throw an error if the path already exists', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_2.runSchematic('lib', { name: 'my-other-lib' }, tree);
        const schema = {
            projectName: 'my-lib',
            destination: 'my-other-lib',
        };
        yield expect(testing_2.callRule(check_destination_1.checkDestination(schema), tree)).rejects.toThrow(`Invalid destination: [${schema.destination}] - Path is not empty.`);
    }));
    it('should NOT throw an error if the path is available', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = {
            projectName: 'my-lib',
            destination: 'my-other-lib',
        };
        yield expect(testing_2.callRule(check_destination_1.checkDestination(schema), tree)).resolves.not.toThrow();
    }));
    it('should normalize the destination', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = {
            projectName: 'my-lib',
            destination: '/my-other-lib//wibble',
        };
        yield testing_2.callRule(check_destination_1.checkDestination(schema), tree);
        expect(schema.destination).toBe('my-other-lib/wibble');
    }));
});
