"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const file_utils_1 = require("./file-utils");
const json_diff_1 = require("../utils/json-diff");
const ignore = require('ignore');
describe('calculateFileChanges', () => {
    it('should return a whole file change by default', () => {
        const changes = file_utils_1.calculateFileChanges(['proj/index.ts'], undefined, (path, revision) => {
            return revision === 'sha1' ? '' : 'const a = 0;';
        });
        expect(changes[0].getChanges()).toEqual([new file_utils_1.WholeFileChange()]);
    });
    it('should return a json changes for json files', () => {
        const changes = file_utils_1.calculateFileChanges(['package.json'], {
            base: 'sha1',
            head: 'sha2',
        }, (path, revision) => {
            return revision === 'sha1'
                ? JSON.stringify({
                    dependencies: {
                        'happy-nrwl': '0.0.1',
                        'not-awesome-nrwl': '0.0.1',
                    },
                })
                : JSON.stringify({
                    dependencies: {
                        'happy-nrwl': '0.0.2',
                        'awesome-nrwl': '0.0.1',
                    },
                });
        });
        expect(changes[0].getChanges()).toContainEqual({
            type: json_diff_1.DiffType.Modified,
            path: ['dependencies', 'happy-nrwl'],
            value: {
                lhs: '0.0.1',
                rhs: '0.0.2',
            },
        });
        expect(changes[0].getChanges()).toContainEqual({
            type: json_diff_1.DiffType.Deleted,
            path: ['dependencies', 'not-awesome-nrwl'],
            value: {
                lhs: '0.0.1',
                rhs: undefined,
            },
        });
        expect(changes[0].getChanges()).toContainEqual({
            type: json_diff_1.DiffType.Added,
            path: ['dependencies', 'awesome-nrwl'],
            value: {
                lhs: undefined,
                rhs: '0.0.1',
            },
        });
    });
    it('should ignore *.md changes', () => {
        const ig = ignore();
        ig.add('*.md');
        const changes = file_utils_1.calculateFileChanges(['proj/readme.md'], undefined, (path, revision) => {
            return revision === 'sha1' ? '' : 'const a = 0;';
        }, ig);
        expect(changes.length).toEqual(0);
    });
});
