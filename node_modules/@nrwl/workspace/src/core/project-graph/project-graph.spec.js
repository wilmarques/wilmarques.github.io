"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const memfs_1 = require("memfs");
const literals_1 = require("@angular-devkit/core/src/utils/literals");
const project_graph_1 = require("./project-graph");
const project_graph_models_1 = require("./project-graph-models");
jest.mock('fs', () => require('memfs').fs);
jest.mock('../../utils/app-root', () => ({ appRootPath: '/root' }));
describe('project graph', () => {
    let packageJson;
    let workspaceJson;
    let nxJson;
    let tsConfigJson;
    let filesJson;
    beforeEach(() => {
        packageJson = {
            name: '@nrwl/workspace-src',
            dependencies: {
                express: '4.0.0',
                'happy-nrwl': '1.0.0',
            },
            devDependencies: {
                '@nrwl/workspace': '*',
            },
        };
        workspaceJson = {
            projects: {
                demo: {
                    root: 'apps/demo/',
                    sourceRoot: 'apps/demo/src',
                    projectType: 'application',
                },
                'demo-e2e': {
                    root: 'apps/demo-e2e/',
                    sourceRoot: 'apps/demo-e2e/src',
                    projectType: 'application',
                },
                ui: {
                    root: 'libs/ui/',
                    sourceRoot: 'libs/ui/src',
                    projectType: 'library',
                },
                'shared-util': {
                    root: 'libs/shared/util/',
                    sourceRoot: 'libs/shared/util/src',
                    projectType: 'library',
                },
                'shared-util-data': {
                    root: 'libs/shared/util/data',
                    sourceRoot: 'libs/shared/util/data/src',
                    projectType: 'library',
                },
                'lazy-lib': {
                    root: 'libs/lazy-lib',
                    sourceRoot: 'libs/lazy-lib',
                    projectType: 'library',
                },
                api: {
                    root: 'apps/api/',
                    sourceRoot: 'apps/api/src',
                    projectType: 'application',
                },
            },
        };
        nxJson = {
            npmScope: 'nrwl',
            implicitDependencies: {
                'package.json': {
                    scripts: {
                        deploy: '*',
                    },
                },
            },
            projects: {
                api: { tags: [] },
                demo: { tags: [], implicitDependencies: ['api'] },
                'demo-e2e': { tags: [] },
                ui: { tags: [] },
                'shared-util': { tags: [] },
                'shared-util-data': { tags: [] },
                'lazy-lib': { tags: [] },
            },
        };
        tsConfigJson = {
            compilerOptions: {
                baseUrl: '.',
                paths: {
                    '@nrwl/shared/util': ['libs/shared/util/src/index.ts'],
                    '@nrwl/shared-util-data': ['libs/shared/util/data/src/index.ts'],
                    '@nrwl/ui': ['libs/ui/src/index.ts'],
                    '@nrwl/lazy-lib': ['libs/lazy-lib/src/index.ts'],
                },
            },
        };
        filesJson = {
            './apps/api/src/index.ts': literals_1.stripIndents `
        require('express');
      `,
            './apps/demo/src/index.ts': literals_1.stripIndents `
        import * as ui from '@nrwl/ui';
        import * as data from '@nrwl/shared-util-data;
        const s = { loadChildren: '@nrwl/lazy-lib#LAZY' }
      `,
            './apps/demo-e2e/src/integration/app.spec.ts': literals_1.stripIndents `
        describe('whatever', () => {});
      `,
            './libs/ui/src/index.ts': literals_1.stripIndents `
        import * as util from '@nrwl/shared/util';
        import('@nrwl/lazy-lib');
      `,
            './libs/shared/util/src/index.ts': literals_1.stripIndents `
        import * as happyNrwl from 'happy-nrwl/a/b/c';
      `,
            './libs/shared/util/data/src/index.ts': literals_1.stripIndents `
        export const SHARED_DATA = 'shared data';
      `,
            './libs/lazy-lib/src/index.ts': literals_1.stripIndents `
        export const LAZY = 'lazy lib';
      `,
            './package.json': JSON.stringify(packageJson),
            './nx.json': JSON.stringify(nxJson),
            './workspace.json': JSON.stringify(workspaceJson),
            './tsconfig.json': JSON.stringify(tsConfigJson),
        };
        memfs_1.vol.reset();
        memfs_1.vol.fromJSON(filesJson, '/root');
    });
    it('should create nodes and dependencies with workspace projects', () => {
        const graph = project_graph_1.createProjectGraph();
        expect(graph.nodes).toMatchObject({
            api: { name: 'api', type: 'app' },
            'demo-e2e': { name: 'demo-e2e', type: 'e2e' },
            demo: { name: 'demo', type: 'app' },
            ui: { name: 'ui', type: 'lib' },
            'shared-util': { name: 'shared-util', type: 'lib' },
            'shared-util-data': { name: 'shared-util-data', type: 'lib' },
            'lazy-lib': { name: 'lazy-lib', type: 'lib' },
            'happy-nrwl': { name: 'happy-nrwl', type: 'npm' },
            express: { name: 'express', type: 'npm' },
        });
        expect(graph.dependencies).toMatchObject({
            api: [{ type: project_graph_models_1.DependencyType.static, source: 'api', target: 'express' }],
            'demo-e2e': [
                { type: project_graph_models_1.DependencyType.implicit, source: 'demo-e2e', target: 'demo' },
            ],
            demo: [
                { type: project_graph_models_1.DependencyType.static, source: 'demo', target: 'ui' },
                {
                    type: project_graph_models_1.DependencyType.static,
                    source: 'demo',
                    target: 'shared-util-data',
                },
                {
                    type: project_graph_models_1.DependencyType.dynamic,
                    source: 'demo',
                    target: 'lazy-lib',
                },
                { type: project_graph_models_1.DependencyType.implicit, source: 'demo', target: 'api' },
            ],
            ui: [
                { type: project_graph_models_1.DependencyType.static, source: 'ui', target: 'shared-util' },
                { type: project_graph_models_1.DependencyType.dynamic, source: 'ui', target: 'lazy-lib' },
            ],
            'shared-util': [
                {
                    type: project_graph_models_1.DependencyType.static,
                    source: 'shared-util',
                    target: 'happy-nrwl',
                },
            ],
        });
    });
    it('should update the graph if the workspace file changes ', () => __awaiter(void 0, void 0, void 0, function* () {
        let graph = project_graph_1.createProjectGraph();
        expect(graph.nodes).toMatchObject({
            demo: { name: 'demo', type: 'app' },
        });
        workspaceJson.projects.demo.projectType = 'library';
        //wait a tick to ensure the modified time of workspace.json will be after the creation of the project graph file
        yield new Promise((resolve) => setTimeout(resolve, 1));
        memfs_1.fs.writeFileSync('/root/workspace.json', JSON.stringify(workspaceJson));
        graph = project_graph_1.createProjectGraph();
        expect(graph.nodes).toMatchObject({
            demo: { name: 'demo', type: 'lib' },
        });
    }));
    it('should handle circular dependencies', () => {
        memfs_1.fs.writeFileSync('/root/libs/shared/util/src/index.ts', `import * as ui from '@nrwl/ui';`);
        const graph = project_graph_1.createProjectGraph();
        expect(graph.dependencies['shared-util']).toEqual([
            {
                type: project_graph_models_1.DependencyType.static,
                source: 'shared-util',
                target: 'ui',
            },
        ]);
        expect(graph.dependencies['ui']).toEqual([
            {
                type: project_graph_models_1.DependencyType.static,
                source: 'ui',
                target: 'shared-util',
            },
            {
                type: project_graph_models_1.DependencyType.dynamic,
                source: 'ui',
                target: 'lazy-lib',
            },
        ]);
    });
});
