"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nx_json_changes_1 = require("./nx-json-changes");
const file_utils_1 = require("../../file-utils");
const json_diff_1 = require("../../../utils/json-diff");
describe('getTouchedProjectsInNxJson', () => {
    it('should not return changes when nx.json is not touched', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'source.ts',
                ext: '.ts',
                mtime: 0,
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual([]);
    });
    it('should return all projects for a whole file change', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'nx.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return all projects for changes to npmScope', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'nx.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['npmScope'],
                        value: {
                            lhs: 'proj',
                            rhs: 'awesome-proj',
                        },
                    },
                ],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return projects added in nx.json', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'nx.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Added,
                        path: ['projects', 'proj1'],
                        value: {
                            lhs: undefined,
                            rhs: {
                                tags: [],
                            },
                        },
                    },
                    {
                        type: json_diff_1.DiffType.Added,
                        path: ['projects', 'proj1', 'tags'],
                        value: {
                            lhs: undefined,
                            rhs: [],
                        },
                    },
                ],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1']);
    });
    it('should return all projects when a project is removed', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'nx.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Deleted,
                        path: ['projects', 'proj3'],
                        value: {
                            lhs: {
                                tags: [],
                            },
                            rhs: undefined,
                        },
                    },
                ],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return projects modified in nx.json', () => {
        const result = nx_json_changes_1.getTouchedProjectsInNxJson([
            {
                file: 'nx.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['projects', 'proj1'],
                        value: {
                            lhs: { tags: ['scope:feat'] },
                            rhs: {
                                tags: ['scope:shared'],
                            },
                        },
                    },
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['projects', 'proj1', 'tags'],
                        value: {
                            lhs: ['scope:feat'],
                            rhs: ['scope:shared'],
                        },
                    },
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['projects', 'proj1', 'tags', '0'],
                        value: {
                            lhs: 'scope:feat',
                            rhs: 'scope:shared',
                        },
                    },
                ],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1']);
    });
});
