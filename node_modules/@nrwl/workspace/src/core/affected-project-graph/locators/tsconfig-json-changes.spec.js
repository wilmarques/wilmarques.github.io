"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const file_utils_1 = require("../../file-utils");
const json_diff_1 = require("../../../utils/json-diff");
const tsconfig_json_changes_1 = require("./tsconfig-json-changes");
const project_graph_1 = require("../../project-graph");
describe('getTouchedProjectsFromTsConfig', () => {
    let graph;
    beforeEach(() => {
        graph = {
            nodes: {
                proj1: {
                    name: 'proj1',
                    type: 'app',
                    data: {
                        root: 'proj1',
                        files: [],
                    },
                },
                proj2: {
                    name: 'proj2',
                    type: 'lib',
                    data: {
                        root: 'proj2',
                        files: [],
                    },
                },
            },
            dependencies: {
                proj1: [
                    {
                        type: project_graph_1.DependencyType.static,
                        source: 'proj1',
                        target: 'proj2',
                    },
                ],
                proj2: [],
            },
        };
    });
    it('should not return changes when tsconfig.json is not touched', () => {
        const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
            {
                file: 'source.ts',
                ext: '.ts',
                mtime: 0,
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual([]);
    });
    describe('Whole File Changes', () => {
        it('should return all projects for a whole file change', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => [new file_utils_1.WholeFileChange()],
                },
            ], null, null, null, graph);
            expect(result).toEqual(['proj1', 'proj2']);
        });
    });
    describe('Changes to other compiler options', () => {
        it('should return all projects', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            strict: false,
                        },
                    }, {
                        compilerOptions: {
                            strict: true,
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toEqual(['proj1', 'proj2']);
        });
    });
    describe('Adding new path mappings', () => {
        it('should return projects pointed to by the path mappings', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {},
                        },
                    }, {
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts'],
                            },
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toEqual(['proj1']);
        });
        it('should accept different types of paths', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {},
                        },
                    }, {
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['./proj1/index.ts'],
                            },
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toEqual(['proj1']);
        });
    });
    describe('Removing path mappings', () => {
        it('should affect all projects if a project is removed', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts'],
                            },
                        },
                    }, {
                        compilerOptions: {
                            paths: {},
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toEqual(['proj1', 'proj2']);
        });
        it('should affect all projects if a path mapping is removed', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts', 'proj1/index2.ts'],
                            },
                        },
                    }, {
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts'],
                            },
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toContainEqual('proj1');
            expect(result).toContainEqual('proj2');
        });
    });
    describe('Modifying Path Mappings', () => {
        it('should return projects that have path mappings modified within them', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts'],
                            },
                        },
                    }, {
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index2.ts'],
                            },
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toContainEqual('proj1');
            expect(result).not.toContainEqual('proj2');
        });
        it('should return both projects that the mappings used to point to and point to now', () => {
            const result = tsconfig_json_changes_1.getTouchedProjectsFromTsConfig([
                {
                    file: 'tsconfig.json',
                    ext: '.json',
                    mtime: 0,
                    getChanges: () => json_diff_1.jsonDiff({
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj1/index.ts'],
                            },
                        },
                    }, {
                        compilerOptions: {
                            paths: {
                                '@proj/proj1': ['proj2/index.ts'],
                            },
                        },
                    }),
                },
            ], null, null, null, graph);
            expect(result).toContainEqual('proj1');
            expect(result).toContainEqual('proj2');
        });
    });
});
