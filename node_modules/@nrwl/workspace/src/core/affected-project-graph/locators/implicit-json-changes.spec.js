"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const implicit_json_changes_1 = require("./implicit-json-changes");
const file_utils_1 = require("../../file-utils");
const json_diff_1 = require("../../../utils/json-diff");
describe('getImplicitlyTouchedProjectsByJsonChanges', () => {
    let workspaceJson;
    let nxJson;
    beforeEach(() => {
        workspaceJson = {
            projects: {
                proj1: {},
                proj2: {},
            },
        };
        nxJson = {
            implicitDependencies: {
                'package.json': {
                    dependencies: ['proj1'],
                    some: {
                        'deep-field': ['proj2'],
                    },
                },
            },
            npmScope: 'scope',
            projects: {
                proj1: {},
                proj2: {},
            },
        };
    });
    it('should handle json changes', () => {
        const result = implicit_json_changes_1.getImplicitlyTouchedProjectsByJsonChanges([
            {
                file: 'package.json',
                mtime: 0,
                ext: '.json',
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['some', 'deep-field'],
                        value: {
                            lhs: 'before',
                            rhs: 'after',
                        },
                    },
                ],
            },
        ], workspaceJson, nxJson);
        expect(result).toEqual(['proj2']);
    });
    it('should handle whole file changes', () => {
        const result = implicit_json_changes_1.getImplicitlyTouchedProjectsByJsonChanges([
            {
                file: 'package.json',
                mtime: 0,
                ext: '.json',
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], workspaceJson, nxJson);
        expect(result).toEqual(['proj1', 'proj2']);
    });
});
