"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const workspace_json_changes_1 = require("./workspace-json-changes");
const file_utils_1 = require("../../file-utils");
const json_diff_1 = require("../../../utils/json-diff");
describe('getTouchedProjectsInWorkspaceJson', () => {
    it('should not return changes when workspace.json is not touched', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'source.ts',
                ext: '.ts',
                mtime: 0,
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], {}, {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual([]);
    });
    it('should return all projects for a whole file change', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'workspace.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [new file_utils_1.WholeFileChange()],
            },
        ], {
            npmScope: 'proj',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return all projects for changes to newProjectRoot', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'workspace.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['newProjectRoot'],
                        value: {
                            lhs: '',
                            rhs: 'projects',
                        },
                    },
                ],
            },
        ], {
            newProjectRoot: 'projects',
            projects: {
                proj1: {
                    tags: [],
                },
                proj2: {
                    tags: [],
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return projects added in workspace.json', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'workspace.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Added,
                        path: ['projects', 'proj1'],
                        value: {
                            lhs: undefined,
                            rhs: {
                                root: 'proj1',
                            },
                        },
                    },
                    {
                        type: json_diff_1.DiffType.Added,
                        path: ['projects', 'proj1', 'root'],
                        value: {
                            lhs: undefined,
                            rhs: 'proj1',
                        },
                    },
                ],
            },
        ], {
            projects: {
                proj1: {
                    root: 'proj1',
                },
            },
        });
        expect(result).toEqual(['proj1']);
    });
    it('should affect all projects if a project is removed from workspace.json', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'workspace.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Deleted,
                        path: ['projects', 'proj3'],
                        value: {
                            lhs: {
                                root: 'proj3',
                            },
                            rhs: undefined,
                        },
                    },
                ],
            },
        ], {
            projects: {
                proj1: {
                    root: 'proj1',
                },
                proj2: {
                    root: 'proj2',
                },
            },
        });
        expect(result).toEqual(['proj1', 'proj2']);
    });
    it('should return projects modified in workspace.json', () => {
        const result = workspace_json_changes_1.getTouchedProjectsInWorkspaceJson([
            {
                file: 'workspace.json',
                ext: '.json',
                mtime: 0,
                getChanges: () => [
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['projects', 'proj1'],
                        value: {
                            lhs: {
                                root: 'proj3',
                            },
                            rhs: {
                                root: 'proj1',
                            },
                        },
                    },
                    {
                        type: json_diff_1.DiffType.Modified,
                        path: ['projects', 'proj1', 'root'],
                        value: {
                            lhs: 'proj3',
                            rhs: 'proj1',
                        },
                    },
                ],
            },
        ], {
            projects: {
                proj1: {
                    root: 'proj1',
                },
                proj2: {
                    root: 'proj2',
                },
            },
        });
        expect(result).toEqual(['proj1']);
    });
});
