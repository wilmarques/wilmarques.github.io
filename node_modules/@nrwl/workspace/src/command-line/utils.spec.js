"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
describe('splitArgs', () => {
    it('should split nx specific arguments into nxArgs', () => {
        expect(utils_1.splitArgsIntoNxArgsAndOverrides({
            base: 'sha1',
            head: 'sha2',
            notNxArg: true,
            _: ['--override'],
            $0: '',
        }, 'affected').nxArgs).toEqual({
            base: 'sha1',
            head: 'sha2',
            projects: [],
            skipNxCache: false,
        });
    });
    it('should default to having a base of master', () => {
        expect(utils_1.splitArgsIntoNxArgsAndOverrides({
            notNxArg: true,
            _: ['--override'],
            $0: '',
        }, 'affected').nxArgs).toEqual({
            base: 'master',
            projects: [],
            skipNxCache: false,
        });
    });
    it('should split non nx specific arguments into target args', () => {
        expect(utils_1.splitArgsIntoNxArgsAndOverrides({
            files: [''],
            notNxArg: true,
            _: ['--override'],
            $0: '',
        }, 'affected').overrides).toEqual({
            notNxArg: true,
            override: true,
        });
    });
    it('should add other args to nx args', () => {
        const { nxArgs, overrides } = utils_1.splitArgsIntoNxArgsAndOverrides({
            notNxArg: true,
            _: ['sha1', 'sha2', '--override'],
            $0: '',
        }, 'affected');
        expect(nxArgs).toEqual({
            base: 'sha1',
            head: 'sha2',
            projects: [],
            skipNxCache: false,
        });
        expect(overrides).toEqual({
            notNxArg: true,
            override: true,
        });
    });
});
