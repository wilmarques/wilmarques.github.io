"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_run_one_options_1 = require("./parse-run-one-options");
describe('parseRunOneOptions', () => {
    const nxJson = { tasksRunnerOptions: { default: { runner: 'somerunner' } } };
    const workspaceJson = { projects: { myproj: { architect: { build: {} } } } };
    const args = ['build', 'myproj', '--configuration=production', '--flag=true'];
    it('should work', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, workspaceJson, args)).toEqual({
            project: 'myproj',
            target: 'build',
            configuration: 'production',
            overrides: { flag: 'true' },
        });
    });
    it('should work with run syntax', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, workspaceJson, [
            'run',
            'myproj:build:production',
            '--flag=true',
        ])).toEqual({
            project: 'myproj',
            target: 'build',
            configuration: 'production',
            overrides: { flag: 'true' },
        });
    });
    it('should use defaultProjectName when no provided', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, Object.assign(Object.assign({}, workspaceJson), { cli: { defaultProjectName: 'myproj' } }), ['build', '--flag=true'])).toEqual({
            project: 'myproj',
            target: 'build',
            overrides: { flag: 'true' },
        });
    });
    it('should return false when no runner is set', () => {
        expect(parse_run_one_options_1.parseRunOneOptions({}, workspaceJson, args)).toBe(false);
        expect(parse_run_one_options_1.parseRunOneOptions({ tasksRunnerOptions: {} }, workspaceJson, args)).toBe(false);
        expect(parse_run_one_options_1.parseRunOneOptions({ tasksRunnerOptions: { default: {} } }, workspaceJson, args)).toBe(false);
    });
    it('should return false when the task is not recognized', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, {}, args)).toBe(false);
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, { projects: {} }, args)).toBe(false);
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, { projects: { architect: {} } }, args)).toBe(false);
    });
    it('should return false when cannot find the right project', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, workspaceJson, ['build', 'wrongproj'])).toBe(false);
    });
    it('should return false when no project specified', () => {
        expect(parse_run_one_options_1.parseRunOneOptions(nxJson, workspaceJson, ['build'])).toBe(false);
    });
});
